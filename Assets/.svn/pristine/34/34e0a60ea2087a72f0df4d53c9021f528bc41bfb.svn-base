using Fusion;
using FusionExamples.UIHelpers;
using FusionHelpers;
using Tanknarok.UI;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;
public enum SCENE_STATE
{
    SCENE_WAITING,
    SCENE_READY,
    SCENE_GAME
}

namespace FusionGame.Stickman
{
	/// <summary>
	/// App entry point and main UI flow management.
	/// </summary>
	public class App : MonoBehaviour
	{
		[SerializeField] private LevelManager _levelManager;
		[SerializeField] private GameManager _gameManagerPrefab;
		[SerializeField] private Panel _uiCurtain;
		[SerializeField] private Panel _uiStart;
		[SerializeField] private Panel _uiProgress;
		[SerializeField] private Panel _uiRoom;
		[SerializeField] private GameObject _uiGame;
        public GameObject WaitingObj;
        public GameObject ReadyObj;
        public GameObject GameObj;

        public SCENE_STATE state;


        private FusionLauncher.ConnectionStatus _status = FusionLauncher.ConnectionStatus.Disconnected;
		private GameMode _gameMode;
		private int _nextPlayerIndex;

		public NetworkRunner runner = null;
		ISceneManagerScript scene_manager = null;

        private void Awake()
		{
			DontDestroyOnLoad(this);
			_levelManager.onStatusUpdate = OnConnectionStatusUpdate;
		}

		private void Start()
		{
			OnConnectionStatusUpdate( null, FusionLauncher.ConnectionStatus.Disconnected, "");
            SetState(SCENE_STATE.SCENE_WAITING);
        }

		private void Update()
		{
			if (_uiProgress.isShowing)
			{
				if (Input.GetKeyUp(KeyCode.Escape))
				{
					BackToLevelScene();
				}
			}
		}

		// What mode to play - Called from the start menu
		public void OnHostOptions()
		{
			SetGameMode(GameMode.Host);
		}

		public void OnJoinOptions()
		{
			SetGameMode(GameMode.Client);
		}

		public void OnSharedOptions()
		{
			SetGameMode(GameMode.Shared);
		}

		private void SetGameMode(GameMode gamemode)
		{
			_gameMode = gamemode;
			if (GateUI(_uiStart))
				_uiRoom.SetVisible(true);
		}

		public void OnEnterRoom()
		{
			FusionLauncher.Launch(_gameMode, Constants.room_name, _gameManagerPrefab, _levelManager, OnConnectionStatusUpdate);
		}

		/// <summary>
		/// Call this method from button events to close the current UI panel and check the return value to decide
		/// if it's ok to proceed with handling the button events. Prevents double-actions and makes sure UI panels are closed. 
		/// </summary>
		/// <param name="ui">Currently visible UI that should be closed</param>
		/// <returns>True if UI is in fact visible and action should proceed</returns>
		private bool GateUI(Panel ui)
		{
			if (!ui.isShowing)
				return false;
			ui.SetVisible(false);
			return true;
		}

		private void OnConnectionStatusUpdate(NetworkRunner runner, FusionLauncher.ConnectionStatus status, string reason)
		{
			if (!this)
				return;

			this.runner = runner;

			if (status != _status)
			{
				switch (status)
				{
					case FusionLauncher.ConnectionStatus.Disconnected:
					case FusionLauncher.ConnectionStatus.Failed:
						BackToLevelScene();
						break;
				}
			}
			
			_status = status;

			if (scene_manager != null) 
			{
				scene_manager.OnConnectionStatusUpdate(runner, status, reason); 
			}	
		}


		public void BackToLevelScene()
		{
            if (runner != null)
				runner = FindObjectOfType<NetworkRunner>();
            if (runner != null && !runner.IsShutdown)
            {
                // Calling with destroyGameObject false because we do this in the OnShutdown callback on FusionLauncher
                runner.Shutdown(false);
            }

            SceneManager.LoadScene("LevelScene");
		}

        public void SetState(SCENE_STATE st)
        {
            state = st;

            switch (state)
            {
                case SCENE_STATE.SCENE_WAITING:
                    WaitingObj.SetActive(true);
                    ReadyObj.SetActive(false);
                    //GameObj.SetActive(false);
                    break;
                case SCENE_STATE.SCENE_READY:
                    WaitingObj.SetActive(false);
                    ReadyObj.SetActive(true);
                    //GameObj.SetActive(false);
                    break;
                case SCENE_STATE.SCENE_GAME:
                    WaitingObj.SetActive(false);
                    ReadyObj.SetActive(false);
                    //GameObj.SetActive(true);



                    break;
            }
        }
    }
}